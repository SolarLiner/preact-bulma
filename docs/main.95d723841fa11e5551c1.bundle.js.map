{"version":3,"file":"main.95d723841fa11e5551c1.bundle.js","sources":["webpack:///./src/forms/index.tsx"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst classnames_1 = require(\"classnames\");\nconst preact_1 = require(\"preact\");\nconst GROUP_ALIGNMENTS = {\n    left: \"is-grouped\",\n    center: \"is-grouped-centered\",\n    right: \"is-grouped-right\",\n    multiline: \"is-grouped-multiline\"\n};\nconst ALIGNMENTS = {\n    left: \"\",\n    center: \"is-centered\",\n    right: \"is-right\"\n};\nfunction Field(props) {\n    // TODO: Fix weird layout of has-addon fields with labels and/or help\n    let label;\n    let help;\n    const classes = classnames_1.default(\"field\", {\n        \"has-addons\": !!props.hasAddons,\n        \"is-expanded\": !!props.expanded,\n        \"is-narrow\": !!props.narrow,\n        [`${GROUP_ALIGNMENTS[props.group]}`]: !!props.group\n    });\n    if (props.label) {\n        label = preact_1.h(\"label\", { class: \"label\" }, props.label);\n    }\n    if (props.help) {\n        const helpClasses = classnames_1.default(\"help\", {\n            [`is-${props.helpColor}`]: !!props.helpColor\n        });\n        help = preact_1.h(\"p\", { class: helpClasses }, props.help);\n    }\n    return (preact_1.h(\"div\", { class: classes },\n        label,\n        props.children,\n        help));\n}\nexports.Field = Field;\nfunction HorizontalGroup(props) {\n    const classes = classnames_1.default(\"field is-horizontal\");\n    let label;\n    if (props.label) {\n        label = (preact_1.h(\"div\", { class: \"field-label is-normal\" },\n            preact_1.h(\"label\", { class: \"label\" }, props.label)));\n    }\n    const innerFieldProps = Object.assign({}, props);\n    delete innerFieldProps.label;\n    delete innerFieldProps.help;\n    return (preact_1.h(\"div\", { class: classes },\n        label,\n        preact_1.h(\"div\", { class: \"field-body\" }, props.children)));\n}\nexports.HorizontalGroup = HorizontalGroup;\nfunction Control(props) {\n    let iconsLeft;\n    let iconsRight;\n    const classes = classnames_1.default(\"control\", {\n        \"has-icons-left\": !!props.iconsLeft,\n        \"has-icons-right\": !!props.iconsRight,\n        \"is-expanded\": !!props.expanded,\n        \"is-loading\": !!props.loading,\n        [`is-${props.size}`]: !!props.size\n    });\n    if (props.iconsLeft) {\n        iconsLeft = (preact_1.h(\"span\", { class: \"icon is-small is-left\" },\n            preact_1.h(\"i\", { class: props.iconsLeft })));\n    }\n    if (props.iconsRight) {\n        iconsRight = (preact_1.h(\"span\", { class: \"icon is-small is-right\" },\n            preact_1.h(\"i\", { class: props.iconsRight })));\n    }\n    return (preact_1.h(\"div\", { class: classes },\n        props.children,\n        iconsLeft,\n        iconsRight));\n}\nexports.Control = Control;\nfunction TextInput(props) {\n    const classes = classnames_1.default(\"input\", {\n        \"is-active\": !!props.active,\n        \"is-focuded\": !!props.focused,\n        \"is-rounded\": !!props.rounded,\n        \"is-static\": !!props.static,\n        [`is-${props.color}`]: !!props.color\n    });\n    return (preact_1.h(\"input\", { class: classes, disabled: props.disabled, onBlur: props.onBlur, onFocus: props.onFocus, onInput: props.onInput, placeholder: props.placeholder, readOnly: props.readOnly, type: props.type, value: props.value }));\n}\nexports.TextInput = TextInput;\nfunction Textarea(props) {\n    const classes = classnames_1.default(\"textarea\", {\n        \"is-static\": !!props.static,\n        \"has-fixed-size\": !!props.fixed,\n        [`is-${props.color}`]: !!props.color,\n        [`is-${props.size}`]: !!props.size\n    });\n    return (preact_1.h(\"textarea\", Object.assign({ class: classes }, props), props.children));\n}\nexports.Textarea = Textarea;\nfunction Select(props) {\n    const classes = classnames_1.default(\"select\", {\n        \"is-fullwidth\": props.fullWidth,\n        \"is-loading\": props.loading,\n        \"is-multiple\": !!props.multiple,\n        \"is-rounded\": !!props.rounded,\n        [`is-${props.color}`]: !!props.color,\n        [`is-${props.size}`]: !!props.size\n    });\n    return (preact_1.h(\"div\", { class: classes },\n        preact_1.h(\"select\", null, props.options.map(el => (preact_1.h(\"option\", null, el))))));\n}\nexports.Select = Select;\nfunction Checkbox(props) {\n    return (preact_1.h(\"label\", { class: \"checkbox\" },\n        preact_1.h(\"input\", { type: \"checkbox\", disabled: props.disabled }),\n        props.children));\n}\nexports.Checkbox = Checkbox;\nfunction FileInput(props) {\n    let label;\n    let icon;\n    let name;\n    const classes = classnames_1.default(\"file\", {\n        \"is-fullwidth\": !!props.fullWidth,\n        \"is-right\": !!props.right,\n        \"is-boxed\": !!props.boxed,\n        \"has-name\": !!props.name,\n        [`is-${props.color}`]: !!props.color,\n        [`is-${props.size}`]: !!props.size,\n        [ALIGNMENTS[props.align]]: !!props.align\n    });\n    if (props.label) {\n        label = preact_1.h(\"span\", { class: \"file-label\" }, props.label);\n    }\n    if (props.icon) {\n        icon = (preact_1.h(\"span\", { className: \"file-icon\" },\n            preact_1.h(\"i\", { class: props.icon })));\n    }\n    if (props.name) {\n        name = preact_1.h(\"span\", { class: \"file-name\" }, props.name);\n    }\n    return (preact_1.h(\"div\", { class: classes },\n        preact_1.h(\"label\", { class: \"file-label\" },\n            preact_1.h(\"input\", { class: \"file-input\", type: \"file\" }),\n            preact_1.h(\"span\", { class: \"file-cta\" },\n                icon,\n                label))));\n}\nexports.FileInput = FileInput;\n"],"mappings":"AACA","sourceRoot":""}